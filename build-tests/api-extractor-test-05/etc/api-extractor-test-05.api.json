{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "6.1.1",
    "schemaVersion": 1000
  },
  "kind": "Package",
  "name": "api-extractor-test-05",
  "canonicalReference": "api-extractor-test-05",
  "docComment": "/**\n * api-extractor-test-05\n *\n * This project tests various documentation generation scenarios and doc comment syntaxes.\n *\n * @packagedocumentation\n */\n",
  "members": [
    {
      "kind": "EntryPoint",
      "name": "",
      "canonicalReference": "",
      "members": [
        {
          "kind": "Class",
          "name": "DocClass1",
          "canonicalReference": "(DocClass1:class)",
          "docComment": "/**\n * This is an example class.\n *\n * @remarks\n *\n * These are some remarks.\n *\n * @defaultvalue\n *\n * a default value for this function\n *\n * @public\n */\n",
          "releaseTag": "Public",
          "members": [
            {
              "kind": "Method",
              "name": "deprecatedExample",
              "canonicalReference": "(deprecatedExample:instance,0)",
              "docComment": "/**\n * @deprecated\n *\n * Use `otherThing()` instead.\n */\n",
              "isStatic": false,
              "resultTypeSignature": "void",
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "signature": "deprecatedExample(): void;"
            },
            {
              "kind": "Method",
              "name": "exampleFunction",
              "canonicalReference": "(exampleFunction:instance,0)",
              "docComment": "/**\n * This is an overloaded function.\n *\n * @param a - the first string\n *\n * @param b - the second string\n */\n",
              "isStatic": false,
              "resultTypeSignature": "string",
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "kind": "Parameter",
                  "name": "a",
                  "canonicalReference": "a",
                  "resultTypeSignature": "string",
                  "signature": "a: string"
                },
                {
                  "kind": "Parameter",
                  "name": "b",
                  "canonicalReference": "b",
                  "resultTypeSignature": "string",
                  "signature": "b: string"
                }
              ],
              "signature": "exampleFunction(a: string, b: string): string;"
            },
            {
              "kind": "Method",
              "name": "exampleFunction",
              "canonicalReference": "(exampleFunction:instance,1)",
              "docComment": "/**\n * This is also an overloaded function.\n *\n * @param x - the number\n */\n",
              "isStatic": false,
              "resultTypeSignature": "number",
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "kind": "Parameter",
                  "name": "x",
                  "canonicalReference": "x",
                  "resultTypeSignature": "number",
                  "signature": "x: number"
                }
              ],
              "signature": "exampleFunction(x: number): number;"
            },
            {
              "kind": "Method",
              "name": "interestingEdgeCases",
              "canonicalReference": "(interestingEdgeCases:instance,0)",
              "docComment": "/**\n * Example: \"\\{ \\\\\"maxItemsToShow\\\\\": 123 \\}\"\n *\n * The regular expression used to validate the constraints is /^[a-zA-Z0-9\\\\-_]+$/\n */\n",
              "isStatic": false,
              "resultTypeSignature": "void",
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "signature": "interestingEdgeCases(): void;"
            },
            {
              "kind": "Property",
              "name": "malformedEvent",
              "canonicalReference": "(malformedEvent:instance)",
              "docComment": "/**\n * This event should have been marked as readonly.\n *\n * @eventproperty\n */\n",
              "isStatic": false,
              "resultTypeSignature": "SystemEvent",
              "releaseTag": "Public",
              "signature": "malformedEvent: SystemEvent;"
            },
            {
              "kind": "Property",
              "name": "modifiedEvent",
              "canonicalReference": "(modifiedEvent:instance)",
              "docComment": "/**\n * This event is fired whenever the object is modified.\n *\n * @eventproperty\n */\n",
              "isStatic": false,
              "resultTypeSignature": "SystemEvent",
              "releaseTag": "Public",
              "signature": "readonly modifiedEvent: SystemEvent;"
            },
            {
              "kind": "Property",
              "name": "regularProperty",
              "canonicalReference": "(regularProperty:instance)",
              "docComment": "/**\n * This is a regular property that happens to use the SystemEvent type.\n */\n",
              "isStatic": false,
              "resultTypeSignature": "SystemEvent",
              "releaseTag": "Public",
              "signature": "regularProperty: SystemEvent;"
            },
            {
              "kind": "Method",
              "name": "sumWithExample",
              "canonicalReference": "(sumWithExample:static,0)",
              "docComment": "/**\n * Returns the sum of two numbers.\n *\n * @remarks\n *\n * This illustrates usage of the `@example` block tag.\n *\n * @param x - the first number to add\n *\n * @param y - the second number to add\n *\n * @returns the sum of the two numbers\n *\n * @example\n *\n * Here's a simple example:\n * ```\n * // Prints \"2\":\n * console.log(DocClass1.sumWithExample(1,1));\n * ```\n *\n * @example\n *\n * Here's an example with negative numbers:\n * ```\n * // Prints \"0\":\n * console.log(DocClass1.sumWithExample(1,-1));\n * ```\n *\n */\n",
              "isStatic": true,
              "resultTypeSignature": "number",
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "kind": "Parameter",
                  "name": "x",
                  "canonicalReference": "x",
                  "resultTypeSignature": "number",
                  "signature": "x: number"
                },
                {
                  "kind": "Parameter",
                  "name": "y",
                  "canonicalReference": "y",
                  "resultTypeSignature": "number",
                  "signature": "y: number"
                }
              ],
              "signature": "static sumWithExample(x: number, y: number): number;"
            },
            {
              "kind": "Method",
              "name": "tableExample",
              "canonicalReference": "(tableExample:instance,0)",
              "docComment": "/**\n * An example with tables:\n *\n * @remarks\n *\n * <table> <tr> <td>John</td> <td>Doe</td> </tr> </table>\n */\n",
              "isStatic": false,
              "resultTypeSignature": "void",
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [],
              "signature": "tableExample(): void;"
            }
          ],
          "signature": "export declare class DocClass1"
        },
        {
          "kind": "Class",
          "name": "SystemEvent",
          "canonicalReference": "(SystemEvent:class)",
          "docComment": "/**\n * A class used to exposed events.\n *\n * @public\n */\n",
          "releaseTag": "Public",
          "members": [
            {
              "kind": "Method",
              "name": "addHandler",
              "canonicalReference": "(addHandler:instance,0)",
              "docComment": "/**\n * Adds an handler for the event.\n */\n",
              "isStatic": false,
              "resultTypeSignature": "void",
              "releaseTag": "Public",
              "overloadIndex": 0,
              "parameters": [
                {
                  "kind": "Parameter",
                  "name": "handler",
                  "canonicalReference": "handler",
                  "resultTypeSignature": "() => void",
                  "signature": "handler: () => void"
                }
              ],
              "signature": "addHandler(handler: () => void): void;"
            }
          ],
          "signature": "export declare class SystemEvent"
        }
      ]
    }
  ]
}
